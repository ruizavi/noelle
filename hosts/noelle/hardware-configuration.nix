# {
#   config,
#   lib,
#   pkgs,
#   modulesPath,
#   ...
# }: {
#   imports = [(modulesPath + "/installer/scan/not-detected.nix")];
#   boot = {
#     initrd.luks.devices.luksroot = {
#       device = "/dev/disk/by-label/cryptroot";
#       preLVM = true;
#       allowDiscards = true;
#     };
#     initrd.availableKernelModules =
#       [
#         "xhci_pci"
#         "thunderbolt"
#         "nvme"
#         "usb_storage"
#         "sd_mod"
#       ]
#       ++ config.boot.initrd.luks.cryptoModules;
#     initrd.kernelModules = ["dm-snapshot"];
#     kernelModules = ["kvm-intel"];
#     extraModulePackages = [];
#   };
#   fileSystems = {
#     "/" = {
#       device = "/dev/disk/by-label/root";
#       fsType = "btrfs";
#       options = [
#         "subvol=root"
#         "compress=zstd"
#         "noatime"
#         "ssd"
#         "space_cache=v2"
#       ];
#     };
#     "/home" = {
#       device = "/dev/disk/by-label/root";
#       fsType = "btrfs";
#       options = [
#         "subvol=home"
#         "compress=zstd"
#         "noatime"
#         "ssd"
#         "space_cache=v2"
#       ];
#     };
#     "/nix" = {
#       device = "/dev/disk/by-label/root";
#       fsType = "btrfs";
#       options = [
#         "subvol=nix"
#         "compress=zstd"
#         "noatime"
#         "ssd"
#         "space_cache=v2"
#       ];
#     };
#     "/var/log" = {
#       device = "/dev/disk/by-label/root";
#       fsType = "btrfs";
#       options = [
#         "subvol=log"
#         "compress=zstd"
#         "noatime"
#         "ssd"
#         "space_cache=v2"
#       ];
#       neededForBoot = true;
#     };
#     ${config.boot.loader.efi.efiSysMountPoint} = {
#       device = "/dev/disk/by-label/boot";
#       fsType = "vfat";
#     };
#   };
#   swapDevices = [
#     {device = "/dev/disk/by-label/swap";}
#   ];
#   networking.useDHCP = lib.mkDefault true;
#   nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
#   powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
#   hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
# }
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["nvme" "xhci_pci" "ahci" "usb_storage" "sd_mod" "rtsx_pci_sdmmc"];
  boot.initrd.kernelModules = [];
  boot.kernelModules = ["kvm-amd"];
  boot.extraModulePackages = [];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/96de5a57-94b4-4669-82e1-b6eb96fc0cd2";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/555C-E8DE";
    fsType = "vfat";
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/803456d9-aa45-41d3-9409-186669229559";}
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
